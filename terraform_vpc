provider "aws" {
   region = "us-east-1"
   access_key = "Enter_access_key"
   secret_key = "Enter_secret_key"
}
variable "vars"{
  description = "vale of cidr block"
}
//      Default Syntax
# resource "<provider>_<resource_type>"  "name" {
#    config  options...
#    key = "value"
#    key2 = "another value"
# }
//      Ec2 Instance
# resource "aws_instance" "myfirst-server" {
#       ami  = "ami-0e472ba40eb589f49"
#       instance_type = "t2.micro"
#       tags = {
#               Name = "TerraformTesting"
#       }
#}
//      VPC Creation
#resource "aws_vpc" "my-vpc" {
#  cidr_block       = "10.0.0.0/16"
#  tags = {
#    Name = "Production"
#  }
#}
// Subnet Creation
#resource "aws_subnet" "my-sub" {
#  vpc_id     = aws_vpc.my-vpc.id
#  cidr_block = "10.0.1.0/24"
#
#  tags = {
#    Name = "Prod-subnet"
#  }
#}

//Whole VPC Creation step by step
# 1. Create VPC
resource "aws_vpc" "my-vpc" {
  cidr_block  = var.vars
  tags = {
    Name = "My-VPC"
  }
}

# 2. Create Internet Gateway
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.my-vpc.id

  tags = {
    Name = "My-I-GW"
  }
}

# 3. Create custom RT
resource "aws_route_table" "rt" {
  vpc_id = aws_vpc.my-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  route {
    ipv6_cidr_block        = "::/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "My-RT"
  }
}

# 4. Create a subnet
resource "aws_subnet" "sub1" {
  vpc_id     = aws_vpc.my-vpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "My-Sub1"
  }
}

# 5. Associate subnet with route Table
resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.sub1.id
  route_table_id = aws_route_table.rt.id
}

# 6. Create security group to allow port 20,80
resource "aws_security_group" "allow_web" {
  name        = "allow_web"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.my-vpc.id

  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "My-SG"
  }
}

# 7. Create an network interface with an ip in the subnet that was created in step 4
resource "aws_network_interface" "nic" {
  subnet_id       = aws_subnet.sub1.id
  private_ips     = ["10.0.1.50"]
  security_groups = [aws_security_group.allow_web.id]
}

# 8. Assign an elastic ip to network interface  created in step 7.
resource "aws_eip" "one" {
  vpc                       = true
  network_interface         = aws_network_interface.nic.id
  associate_with_private_ip = "10.0.1.50"
  depends_on = [aws_internet_gateway.gw]
}

# 9. Create ubuntu server and install nginx
resource "aws_instance" "web" {
  ami           = "ami-0e472ba40eb589f49"
  instance_type = "t2.micro"
  availability_zone = "us-east-1a"
  key_name = "AjaySahu_test_key"
  network_interface {
    network_interface_id = aws_network_interface.nic.id
    device_index         = 0
  }

  user_data = <<-EOF
              #!/bin/bash
              sudo apt update -y
              sudo apt install nginx -y
              sudo systemctl start nginx
              sudo bash -c "echo My Web Server  > /var/www/html/index.html"
              EOF
  tags = {
    Name = "Web_Instance"
  }
}

output "server_public_ip"{
  value = aws_instance.web.public_ip
}
